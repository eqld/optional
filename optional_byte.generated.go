package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Byte is a superset of type byte that has explicit "empty" value.
type Byte struct {
	Value   byte
	Present bool
}

// MakeByte converts byte to Byte.
func MakeByte(value byte) Byte {
	return Byte{Value: value, Present: true}
}

// MakeByteFromPtr converts a pointer to byte to Byte.
func MakeByteFromPtr(ptr *byte) Byte {
	if ptr == nil {
		return Byte{}
	}

	return MakeByte(*ptr)
}

// SafeValue safely converts Byte to byte returning its default value if the value of Byte is not present.
func (o Byte) SafeValue() (value byte) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Byte to a pointer to byte returning nil pointer if the value of Byte is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Byte.
func (o Byte) SafePtr() (ptr *byte) {
	if o.Present {
		ptr = new(byte)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Byte to byte returning it with a flag set to true
// or its default value and the flag set to false if the value of Byte is not present.
func (o Byte) SafeValueWithFlag() (value byte, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Byte to byte returning it with nil error
// or its default value and non-nil error if the value of Byte is not present.
func (o Byte) SafeValueWithErr() (value byte, err error) {
	if !o.Present {
		err = errors.New("value of optional.Byte is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Byte to a pointer to byte returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Byte is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Byte.
func (o Byte) SafePtrWithFlag() (ptr *byte, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(byte)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Byte to a pointer to byte returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Byte is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Byte.
func (o Byte) SafePtrWithErr() (ptr *byte, err error) {
	if !o.Present {
		err = errors.New("value of optional.Byte is not present")
		return
	}

	ptr = new(byte)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Byte to json.
func (o Byte) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Byte from json.
func (o *Byte) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
