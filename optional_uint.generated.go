package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Uint is a superset of type uint that has explicit "empty" value.
type Uint struct {
	Value   uint
	Present bool
}

// MakeUint converts uint to Uint.
func MakeUint(value uint) Uint {
	return Uint{Value: value, Present: true}
}

// MakeUintFromPtr converts a pointer to uint to Uint.
func MakeUintFromPtr(ptr *uint) Uint {
	if ptr == nil {
		return Uint{}
	}

	return MakeUint(*ptr)
}

// SafeValue safely converts Uint to uint returning its default value if the value of Uint is not present.
func (o Uint) SafeValue() (value uint) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Uint to a pointer to uint returning nil pointer if the value of Uint is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uint.
func (o Uint) SafePtr() (ptr *uint) {
	if o.Present {
		ptr = new(uint)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Uint to uint returning it with a flag set to true
// or its default value and the flag set to false if the value of Uint is not present.
func (o Uint) SafeValueWithFlag() (value uint, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Uint to uint returning it with nil error
// or its default value and non-nil error if the value of Uint is not present.
func (o Uint) SafeValueWithErr() (value uint, err error) {
	if !o.Present {
		err = errors.New("value of optional.Uint is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Uint to a pointer to uint returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Uint is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uint.
func (o Uint) SafePtrWithFlag() (ptr *uint, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(uint)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Uint to a pointer to uint returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Uint is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uint.
func (o Uint) SafePtrWithErr() (ptr *uint, err error) {
	if !o.Present {
		err = errors.New("value of optional.Uint is not present")
		return
	}

	ptr = new(uint)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Uint to json.
func (o Uint) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Uint from json.
func (o *Uint) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
