// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Uint is a superset of type uint that has explicit "empty" value.
type Uint struct {
	Value   uint
	Present bool
}

// MakeUint converts uint to Uint
func MakeUint(value uint) Uint {
	return Uint{Value: value, Present: true}
}

// MakeUintFromPtr converts a pointer to uint to Uint
func MakeUintFromPtr(ptr *uint) Uint {
	if ptr == nil {
		return Uint{}
	}

	return MakeUint(*ptr)
}

// SafeValue safely converts Uint to uint returning its default value if the value of Uint is not present
func (o Uint) SafeValue() (value uint) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Uint to a pointer to uint returning nil pointer if the value of Uint is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uint
func (o Uint) SafePtr() (ptr *uint) {
	if o.Present {
		ptr = new(uint)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Uint to json
func (o Uint) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Uint from json
func (o *Uint) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
