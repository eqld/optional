package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Float64 is a superset of type float64 that has explicit "empty" value.
type Float64 struct {
	Value   float64
	Present bool
}

// MakeFloat64 converts float64 to Float64.
func MakeFloat64(value float64) Float64 {
	return Float64{Value: value, Present: true}
}

// MakeFloat64FromPtr converts a pointer to float64 to Float64.
func MakeFloat64FromPtr(ptr *float64) Float64 {
	if ptr == nil {
		return Float64{}
	}

	return MakeFloat64(*ptr)
}

// SafeValue safely converts Float64 to float64 returning its default value if the value of Float64 is not present.
func (o Float64) SafeValue() (value float64) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Float64 to a pointer to float64 returning nil pointer if the value of Float64 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Float64.
func (o Float64) SafePtr() (ptr *float64) {
	if o.Present {
		ptr = new(float64)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Float64 to float64 returning it with a flag set to true
// or its default value and the flag set to false if the value of Float64 is not present.
func (o Float64) SafeValueWithFlag() (value float64, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Float64 to float64 returning it with nil error
// or its default value and non-nil error if the value of Float64 is not present.
func (o Float64) SafeValueWithErr() (value float64, err error) {
	if !o.Present {
		err = errors.New("value of optional.Float64 is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Float64 to a pointer to float64 returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Float64 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Float64.
func (o Float64) SafePtrWithFlag() (ptr *float64, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(float64)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Float64 to a pointer to float64 returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Float64 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Float64.
func (o Float64) SafePtrWithErr() (ptr *float64, err error) {
	if !o.Present {
		err = errors.New("value of optional.Float64 is not present")
		return
	}

	ptr = new(float64)
	*ptr = o.Value

	return
}

// Equals returns true if both values are not present or both values are present and are equal according to a provided determinant.
func (o Float64) Equals(other Float64, determinant func(this, other float64) bool) bool {
	return (!o.Present && !other.Present) || (o.Present && other.Present && determinant(o.Value, other.Value))
}

// Compare returns a result of provided comparator and true if both values are present, otherwise it returns 0 and false.
func (o Float64) Compare(other Float64, comparator func(this, other float64) int) (int, bool) {
	if !o.Present || !other.Present {
		return 0, false
	}

	return comparator(o.Value, other.Value), true
}

// Filter returns the Float64 if its value is present and it matches the given predicate, otherwise it returns an empty Float64.
func (o Float64) Filter(test func(value float64) bool) (result Float64) {
	if !o.Present || !test(o.Value) {
		return
	}

	return o
}

// Map applies the provided mapping function to a value and returns its result as Float64 if the value is present,
// otherwise is returns an empty Float64.
func (o Float64) Map(mapper func(value float64) (result float64, present bool)) (result Float64) {
	if !o.Present {
		return
	}

	result.Value, result.Present = mapper(o.Value)

	return
}

// IfPresent invokes the specified action with the value if it is present.
func (o Float64) IfPresent(action func(value float64)) {
	if o.Present {
		action(o.Value)
	}
}

// OrElse returns the value if it is present, otherwise it returns given other value.
func (o Float64) OrElse(other float64) float64 {
	if !o.Present {
		return other
	}

	return o.Value
}

// OrElseWithFlag returns the value if it is present with a flag set to true, otherwise it returns given other value
// and the flag set to false.
func (o Float64) OrElseWithFlag(other float64) (float64, bool) {
	if !o.Present {
		return other, false
	}

	return o.Value, o.Present
}

// OrElseWithErr returns the value if it is present with nil error, otherwise it returns given other value
// and non-nil error.
func (o Float64) OrElseWithErr(other float64) (float64, error) {
	if !o.Present {
		return other, errors.New("value of optional.Float64 is not present")
	}

	return o.Value, nil
}

// OrElseGet returns the value if it is present, otherwise it invokes a supplier and returns a result of that invocation.
func (o Float64) OrElseGet(supplier func() float64) float64 {
	if !o.Present {
		return supplier()
	}

	return o.Value
}

// OrElseGetWithFlag returns the value if it is present with a flag set to true, otherwise it invokes a supplier and returns
// a result of that invocation with a flag set to false.
func (o Float64) OrElseGetWithFlag(supplier func() float64) (result float64, ok bool) {
	if !o.Present {
		return supplier(), false
	}

	return o.Value, o.Present
}

// OrElseGetWithErr returns the value if it is present with nil error, otherwise it invokes a supplier and returns
// a result of that invocation with non-nil error.
func (o Float64) OrElseGetWithErr(supplier func() float64) (result float64, err error) {
	if !o.Present {
		return supplier(), errors.New("value of optional.Float64 is not present")
	}

	return o.Value, nil
}

// OrElseErr returns the value if it is present with nil error, otherwise it invokes an error supplier and returns
// default value and an error returned by the error supplier.
func (o Float64) OrElseErr(errSupplier func() error) (result float64, err error) {
	if !o.Present {
		err = errSupplier()
		return
	}

	return o.Value, nil
}

// MarshalJSON marshals Float64 to json.
func (o Float64) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Float64 from json.
func (o *Float64) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
