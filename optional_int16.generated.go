package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Int16 is a superset of type int16 that has explicit "empty" value.
type Int16 struct {
	Value   int16
	Present bool
}

// MakeInt16 converts int16 to Int16.
func MakeInt16(value int16) Int16 {
	return Int16{Value: value, Present: true}
}

// MakeInt16FromPtr converts a pointer to int16 to Int16.
func MakeInt16FromPtr(ptr *int16) Int16 {
	if ptr == nil {
		return Int16{}
	}

	return MakeInt16(*ptr)
}

// SafeValue safely converts Int16 to int16 returning its default value if the value of Int16 is not present.
func (o Int16) SafeValue() (value int16) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Int16 to a pointer to int16 returning nil pointer if the value of Int16 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int16.
func (o Int16) SafePtr() (ptr *int16) {
	if o.Present {
		ptr = new(int16)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Int16 to int16 returning it with a flag set to true
// or its default value and the flag set to false if the value of Int16 is not present.
func (o Int16) SafeValueWithFlag() (value int16, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Int16 to int16 returning it with nil error
// or its default value and non-nil error if the value of Int16 is not present.
func (o Int16) SafeValueWithErr() (value int16, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int16 is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Int16 to a pointer to int16 returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Int16 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int16.
func (o Int16) SafePtrWithFlag() (ptr *int16, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(int16)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Int16 to a pointer to int16 returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Int16 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int16.
func (o Int16) SafePtrWithErr() (ptr *int16, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int16 is not present")
		return
	}

	ptr = new(int16)
	*ptr = o.Value

	return
}

// Equals returns true if both values are not present or both values are present and are equal according to a provided determinant.
func (o Int16) Equals(other Int16, determinant func(this, other int16) bool) bool {
	return (!o.Present && !other.Present) || (o.Present && other.Present && determinant(o.Value, other.Value))
}

// Compare returns a result of provided comparator and true if both values are present, otherwise it returns 0 and false.
func (o Int16) Compare(other Int16, comparator func(this, other int16) int) (int, bool) {
	if !o.Present || !other.Present {
		return 0, false
	}

	return comparator(o.Value, other.Value), true
}

// Filter returns the Int16 if its value is present and it matches the given predicate, otherwise it returns an empty Int16.
func (o Int16) Filter(test func(value int16) bool) (result Int16) {
	if !o.Present || !test(o.Value) {
		return
	}

	return o
}

// Map applies the provided mapping function to a value and returns its result as Int16 if the value is present,
// otherwise is returns an empty Int16.
func (o Int16) Map(mapper func(value int16) (result int16, present bool)) (result Int16) {
	if !o.Present {
		return
	}

	result.Value, result.Present = mapper(o.Value)

	return
}

// IfPresent invokes the specified action with the value if it is present.
func (o Int16) IfPresent(action func(value int16)) {
	if o.Present {
		action(o.Value)
	}
}

// OrElse returns the value if it is present, otherwise it returns given other value.
func (o Int16) OrElse(other int16) int16 {
	if !o.Present {
		return other
	}

	return o.Value
}

// OrElseFlag returns the value if it is present with a flag set to true, otherwise it returns given other value
// and the flag set to false.
func (o Int16) OrElseFlag(other int16) (int16, bool) {
	if !o.Present {
		return other, false
	}

	return o.Value, o.Present
}

// OrElseErr returns the value if it is present with nil error, otherwise it returns given other value
// and non-nil error.
func (o Int16) OrElseErr(other int16) (int16, error) {
	if !o.Present {
		return other, errors.New("value of optional.Int16 is not present")
	}

	return o.Value, nil
}

// OrElseGet returns the value if it is present, otherwise it invokes a supplier and returns a result of that invocation.
func (o Int16) OrElseGet(supplier func() int16) int16 {
	if !o.Present {
		return supplier()
	}

	return o.Value
}

// OrElseGetFlag returns the value if it is present with a flag set to true, otherwise it invokes a supplier and returns
// a result of that invocation with a flag set to false.
func (o Int16) OrElseGetFlag(supplier func() int16) (result int16, ok bool) {
	if !o.Present {
		return supplier(), false
	}

	return o.Value, o.Present
}

// OrElseGetErr returns the value if it is present with nil error, otherwise it invokes a supplier and returns
// a result of that invocation with non-nil error.
func (o Int16) OrElseGetErr(supplier func() int16) (result int16, err error) {
	if !o.Present {
		return supplier(), errors.New("value of optional.Int16 is not present")
	}

	return o.Value, nil
}

// MarshalJSON marshals Int16 to json.
func (o Int16) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Int16 from json.
func (o *Int16) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
