// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Int16 is a superset of type int16 that has explicit "empty" value.
type Int16 struct {
	Value   int16
	Present bool
}

// MakeInt16 converts int16 to Int16
func MakeInt16(value int16) Int16 {
	return Int16{Value: value, Present: true}
}

// MakeInt16FromPtr converts a pointer to int16 to Int16
func MakeInt16FromPtr(ptr *int16) Int16 {
	if ptr == nil {
		return Int16{}
	}

	return MakeInt16(*ptr)
}

// SafeValue safely converts Int16 to int16 returning its default value if the value of Int16 is not present
func (o Int16) SafeValue() (value int16) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Int16 to a pointer to int16 returning nil pointer if the value of Int16 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int16
func (o Int16) SafePtr() (ptr *int16) {
	if o.Present {
		ptr = new(int16)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Int16 to json
func (o Int16) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Int16 from json
func (o *Int16) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
