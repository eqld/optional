package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Bool is a superset of type bool that has explicit "empty" value.
type Bool struct {
	Value   bool
	Present bool
}

// MakeBool converts bool to Bool.
func MakeBool(value bool) Bool {
	return Bool{Value: value, Present: true}
}

// MakeBoolFromPtr converts a pointer to bool to Bool.
func MakeBoolFromPtr(ptr *bool) Bool {
	if ptr == nil {
		return Bool{}
	}

	return MakeBool(*ptr)
}

// SafeValue safely converts Bool to bool returning its default value if the value of Bool is not present.
func (o Bool) SafeValue() (value bool) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Bool to a pointer to bool returning nil pointer if the value of Bool is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Bool.
func (o Bool) SafePtr() (ptr *bool) {
	if o.Present {
		ptr = new(bool)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Bool to bool returning it with a flag set to true
// or its default value and the flag set to false if the value of Bool is not present.
func (o Bool) SafeValueWithFlag() (value bool, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Bool to bool returning it with nil error
// or its default value and non-nil error if the value of Bool is not present.
func (o Bool) SafeValueWithErr() (value bool, err error) {
	if !o.Present {
		err = errors.New("value of optional.Bool is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Bool to a pointer to bool returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Bool is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Bool.
func (o Bool) SafePtrWithFlag() (ptr *bool, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(bool)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Bool to a pointer to bool returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Bool is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Bool.
func (o Bool) SafePtrWithErr() (ptr *bool, err error) {
	if !o.Present {
		err = errors.New("value of optional.Bool is not present")
		return
	}

	ptr = new(bool)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Bool to json.
func (o Bool) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Bool from json.
func (o *Bool) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
