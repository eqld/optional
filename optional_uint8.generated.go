// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Uint8 is a superset of type uint8 that has explicit "empty" value.
type Uint8 struct {
	Value   uint8
	Present bool
}

// MakeUint8 converts uint8 to Uint8
func MakeUint8(value uint8) Uint8 {
	return Uint8{Value: value, Present: true}
}

// MakeUint8FromPtr converts a pointer to uint8 to Uint8
func MakeUint8FromPtr(ptr *uint8) Uint8 {
	if ptr == nil {
		return Uint8{}
	}

	return MakeUint8(*ptr)
}

// SafeValue safely converts Uint8 to uint8 returning its default value if the value of Uint8 is not present
func (o Uint8) SafeValue() (value uint8) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Uint8 to a pointer to uint8 returning nil pointer if the value of Uint8 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uint8
func (o Uint8) SafePtr() (ptr *uint8) {
	if o.Present {
		ptr = new(uint8)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Uint8 to json
func (o Uint8) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Uint8 from json
func (o *Uint8) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
