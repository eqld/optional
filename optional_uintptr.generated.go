package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Uintptr is a superset of type uintptr that has explicit "empty" value.
type Uintptr struct {
	Value   uintptr
	Present bool
}

// MakeUintptr converts uintptr to Uintptr.
func MakeUintptr(value uintptr) Uintptr {
	return Uintptr{Value: value, Present: true}
}

// MakeUintptrFromPtr converts a pointer to uintptr to Uintptr.
func MakeUintptrFromPtr(ptr *uintptr) Uintptr {
	if ptr == nil {
		return Uintptr{}
	}

	return MakeUintptr(*ptr)
}

// SafeValue safely converts Uintptr to uintptr returning its default value if the value of Uintptr is not present.
func (o Uintptr) SafeValue() (value uintptr) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Uintptr to a pointer to uintptr returning nil pointer if the value of Uintptr is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uintptr.
func (o Uintptr) SafePtr() (ptr *uintptr) {
	if o.Present {
		ptr = new(uintptr)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Uintptr to uintptr returning it with a flag set to true
// or its default value and the flag set to false if the value of Uintptr is not present.
func (o Uintptr) SafeValueWithFlag() (value uintptr, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Uintptr to uintptr returning it with nil error
// or its default value and non-nil error if the value of Uintptr is not present.
func (o Uintptr) SafeValueWithErr() (value uintptr, err error) {
	if !o.Present {
		err = errors.New("value of optional.Uintptr is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Uintptr to a pointer to uintptr returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Uintptr is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uintptr.
func (o Uintptr) SafePtrWithFlag() (ptr *uintptr, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(uintptr)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Uintptr to a pointer to uintptr returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Uintptr is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uintptr.
func (o Uintptr) SafePtrWithErr() (ptr *uintptr, err error) {
	if !o.Present {
		err = errors.New("value of optional.Uintptr is not present")
		return
	}

	ptr = new(uintptr)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Uintptr to json.
func (o Uintptr) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Uintptr from json.
func (o *Uintptr) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
