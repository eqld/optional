// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Uintptr is a superset of type uintptr that has explicit "empty" value.
type Uintptr struct {
	Value   uintptr
	Present bool
}

// MakeUintptr converts uintptr to Uintptr
func MakeUintptr(value uintptr) Uintptr {
	return Uintptr{Value: value, Present: true}
}

// MakeUintptrFromPtr converts a pointer to uintptr to Uintptr
func MakeUintptrFromPtr(ptr *uintptr) Uintptr {
	if ptr == nil {
		return Uintptr{}
	}

	return MakeUintptr(*ptr)
}

// SafeValue safely converts Uintptr to uintptr returning its default value if the value of Uintptr is not present
func (o Uintptr) SafeValue() (value uintptr) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Uintptr to a pointer to uintptr returning nil pointer if the value of Uintptr is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Uintptr
func (o Uintptr) SafePtr() (ptr *uintptr) {
	if o.Present {
		ptr = new(uintptr)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Uintptr to json
func (o Uintptr) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Uintptr from json
func (o *Uintptr) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
