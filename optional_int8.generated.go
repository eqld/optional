// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Int8 is a superset of type int8 that has explicit "empty" value.
type Int8 struct {
	Value   int8
	Present bool
}

// MakeInt8 converts int8 to Int8
func MakeInt8(value int8) Int8 {
	return Int8{Value: value, Present: true}
}

// MakeInt8FromPtr converts a pointer to int8 to Int8
func MakeInt8FromPtr(ptr *int8) Int8 {
	if ptr == nil {
		return Int8{}
	}

	return MakeInt8(*ptr)
}

// SafeValue safely converts Int8 to int8 returning its default value if the value of Int8 is not present
func (o Int8) SafeValue() (value int8) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Int8 to a pointer to int8 returning nil pointer if the value of Int8 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int8
func (o Int8) SafePtr() (ptr *int8) {
	if o.Present {
		ptr = new(int8)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Int8 to json
func (o Int8) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Int8 from json
func (o *Int8) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
