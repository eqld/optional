// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT
package optional

import "encoding/json"

// Complex128 is a superset of type complex128 that has explicit "empty" value.
type Complex128 struct {
	Value   complex128
	Present bool
}

// MakeComplex128 converts complex128 to Complex128
func MakeComplex128(value complex128) Complex128 {
	return Complex128{Value: value, Present: true}
}

// MakeComplex128FromPtr converts a pointer to complex128 to Complex128
func MakeComplex128FromPtr(ptr *complex128) Complex128 {
	if ptr == nil {
		return Complex128{}
	}

	return MakeComplex128(*ptr)
}

// SafeValue safely converts Complex128 to complex128 returning its default value if the value of Complex128 is not present
func (o Complex128) SafeValue() (value complex128) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Complex128 to a pointer to complex128 returning nil pointer if the value of Complex128 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Complex128
func (o Complex128) SafePtr() (ptr *complex128) {
	if o.Present {
		ptr = new(complex128)
		*ptr = o.Value
	}

	return
}

// MarshalJSON marshals Complex128 to json
func (o Complex128) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Complex128 from json
func (o *Complex128) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
