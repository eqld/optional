package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Int is a superset of type int that has explicit "empty" value.
type Int struct {
	Value   int
	Present bool
}

// MakeInt converts int to Int.
func MakeInt(value int) Int {
	return Int{Value: value, Present: true}
}

// MakeIntFromPtr converts a pointer to int to Int.
func MakeIntFromPtr(ptr *int) Int {
	if ptr == nil {
		return Int{}
	}

	return MakeInt(*ptr)
}

// SafeValue safely converts Int to int returning its default value if the value of Int is not present.
func (o Int) SafeValue() (value int) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Int to a pointer to int returning nil pointer if the value of Int is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int.
func (o Int) SafePtr() (ptr *int) {
	if o.Present {
		ptr = new(int)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Int to int returning it with a flag set to true
// or its default value and the flag set to false if the value of Int is not present.
func (o Int) SafeValueWithFlag() (value int, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Int to int returning it with nil error
// or its default value and non-nil error if the value of Int is not present.
func (o Int) SafeValueWithErr() (value int, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Int to a pointer to int returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Int is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int.
func (o Int) SafePtrWithFlag() (ptr *int, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(int)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Int to a pointer to int returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Int is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int.
func (o Int) SafePtrWithErr() (ptr *int, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int is not present")
		return
	}

	ptr = new(int)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Int to json.
func (o Int) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Int from json.
func (o *Int) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
