package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Int32 is a superset of type int32 that has explicit "empty" value.
type Int32 struct {
	Value   int32
	Present bool
}

// MakeInt32 converts int32 to Int32.
func MakeInt32(value int32) Int32 {
	return Int32{Value: value, Present: true}
}

// MakeInt32FromPtr converts a pointer to int32 to Int32.
func MakeInt32FromPtr(ptr *int32) Int32 {
	if ptr == nil {
		return Int32{}
	}

	return MakeInt32(*ptr)
}

// SafeValue safely converts Int32 to int32 returning its default value if the value of Int32 is not present.
func (o Int32) SafeValue() (value int32) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Int32 to a pointer to int32 returning nil pointer if the value of Int32 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int32.
func (o Int32) SafePtr() (ptr *int32) {
	if o.Present {
		ptr = new(int32)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Int32 to int32 returning it with a flag set to true
// or its default value and the flag set to false if the value of Int32 is not present.
func (o Int32) SafeValueWithFlag() (value int32, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Int32 to int32 returning it with nil error
// or its default value and non-nil error if the value of Int32 is not present.
func (o Int32) SafeValueWithErr() (value int32, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int32 is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Int32 to a pointer to int32 returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Int32 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int32.
func (o Int32) SafePtrWithFlag() (ptr *int32, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(int32)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Int32 to a pointer to int32 returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Int32 is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Int32.
func (o Int32) SafePtrWithErr() (ptr *int32, err error) {
	if !o.Present {
		err = errors.New("value of optional.Int32 is not present")
		return
	}

	ptr = new(int32)
	*ptr = o.Value

	return
}

// MarshalJSON marshals Int32 to json.
func (o Int32) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Int32 from json.
func (o *Int32) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
