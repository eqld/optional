package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// String is a superset of type string that has explicit "empty" value.
type String struct {
	Value   string
	Present bool
}

// MakeString converts string to String.
func MakeString(value string) String {
	return String{Value: value, Present: true}
}

// MakeStringFromPtr converts a pointer to string to String.
func MakeStringFromPtr(ptr *string) String {
	if ptr == nil {
		return String{}
	}

	return MakeString(*ptr)
}

// SafeValue safely converts String to string returning its default value if the value of String is not present.
func (o String) SafeValue() (value string) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts String to a pointer to string returning nil pointer if the value of String is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of String.
func (o String) SafePtr() (ptr *string) {
	if o.Present {
		ptr = new(string)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts String to string returning it with a flag set to true
// or its default value and the flag set to false if the value of String is not present.
func (o String) SafeValueWithFlag() (value string, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts String to string returning it with nil error
// or its default value and non-nil error if the value of String is not present.
func (o String) SafeValueWithErr() (value string, err error) {
	if !o.Present {
		err = errors.New("value of optional.String is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts String to a pointer to string returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of String is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of String.
func (o String) SafePtrWithFlag() (ptr *string, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(string)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts String to a pointer to string returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of String is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of String.
func (o String) SafePtrWithErr() (ptr *string, err error) {
	if !o.Present {
		err = errors.New("value of optional.String is not present")
		return
	}

	ptr = new(string)
	*ptr = o.Value

	return
}

// MarshalJSON marshals String to json.
func (o String) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals String from json.
func (o *String) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
