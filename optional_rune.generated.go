package optional

// Code generated by github.com/eqld/optional/cmd, DO NOT EDIT

import (
	"encoding/json"
	"errors"
)

// Rune is a superset of type rune that has explicit "empty" value.
type Rune struct {
	Value   rune
	Present bool
}

// MakeRune converts rune to Rune.
func MakeRune(value rune) Rune {
	return Rune{Value: value, Present: true}
}

// MakeRuneFromPtr converts a pointer to rune to Rune.
func MakeRuneFromPtr(ptr *rune) Rune {
	if ptr == nil {
		return Rune{}
	}

	return MakeRune(*ptr)
}

// SafeValue safely converts Rune to rune returning its default value if the value of Rune is not present.
func (o Rune) SafeValue() (value rune) {
	if o.Present {
		value = o.Value
	}

	return
}

// SafePtr safely converts Rune to a pointer to rune returning nil pointer if the value of Rune is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Rune.
func (o Rune) SafePtr() (ptr *rune) {
	if o.Present {
		ptr = new(rune)
		*ptr = o.Value
	}

	return
}

// SafeValueWithFlag safely converts Rune to rune returning it with a flag set to true
// or its default value and the flag set to false if the value of Rune is not present.
func (o Rune) SafeValueWithFlag() (value rune, ok bool) {
	if !o.Present {
		return
	}

	return o.Value, o.Present
}

// SafeValueWithErr safely converts Rune to rune returning it with nil error
// or its default value and non-nil error if the value of Rune is not present.
func (o Rune) SafeValueWithErr() (value rune, err error) {
	if !o.Present {
		err = errors.New("value of optional.Rune is not present")
		return
	}

	return o.Value, nil
}

// SafePtrWithFlag safely converts Rune to a pointer to rune returning a pointer to a value with a flag set to true
// or nil pointer and the flag set to false if the value of Rune is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Rune.
func (o Rune) SafePtrWithFlag() (ptr *rune, ok bool) {
	if !o.Present {
		return
	}

	ptr = new(rune)
	*ptr, ok = o.Value, o.Present

	return
}

// SafePtrWithErr safely converts Rune to a pointer to rune returning a pointer to a value with nil error
// or nil pointer and non-nil error if the value of Rune is not present;
// the pointer, if not nil, DOES NOT point to the underlying value of Rune.
func (o Rune) SafePtrWithErr() (ptr *rune, err error) {
	if !o.Present {
		err = errors.New("value of optional.Rune is not present")
		return
	}

	ptr = new(rune)
	*ptr = o.Value

	return
}

// Equals returns true if both values are not present or both values are present and are equal according to a provided determinant.
func (o Rune) Equals(other Rune, determinant func(this, other rune) bool) bool {
	return (!o.Present && !other.Present) || (o.Present && other.Present && determinant(o.Value, other.Value))
}

// Compare returns a result of provided comparator and true if both values are present, otherwise it returns 0 and false.
func (o Rune) Compare(other Rune, comparator func(this, other rune) int) (int, bool) {
	if !o.Present || !other.Present {
		return 0, false
	}

	return comparator(o.Value, other.Value), true
}

// Filter returns the Rune if its value is present and it matches the given predicate, otherwise it returns an empty Rune.
func (o Rune) Filter(test func(value rune) bool) (result Rune) {
	if !o.Present || !test(o.Value) {
		return
	}

	return o
}

// Map applies the provided mapping function to a value and returns its result as Rune if the value is present,
// otherwise is returns an empty Rune.
func (o Rune) Map(mapper func(value rune) (result rune, present bool)) (result Rune) {
	if !o.Present {
		return
	}

	result.Value, result.Present = mapper(o.Value)

	return
}

// IfPresent invokes the specified action with the value if it is present.
func (o Rune) IfPresent(action func(value rune)) {
	if o.Present {
		action(o.Value)
	}
}

// OrElse returns the value if it is present, otherwise it returns given other value.
func (o Rune) OrElse(other rune) rune {
	if !o.Present {
		return other
	}

	return o.Value
}

// OrElseFlag returns the value if it is present with a flag set to true, otherwise it returns given other value
// and the flag set to false.
func (o Rune) OrElseFlag(other rune) (rune, bool) {
	if !o.Present {
		return other, false
	}

	return o.Value, o.Present
}

// OrElseErr returns the value if it is present with nil error, otherwise it returns given other value
// and non-nil error.
func (o Rune) OrElseErr(other rune) (rune, error) {
	if !o.Present {
		return other, errors.New("value of optional.Rune is not present")
	}

	return o.Value, nil
}

// OrElseGet returns the value if it is present, otherwise it invokes a supplier and returns a result of that invocation.
func (o Rune) OrElseGet(supplier func() rune) rune {
	if !o.Present {
		return supplier()
	}

	return o.Value
}

// OrElseGetFlag returns the value if it is present with a flag set to true, otherwise it invokes a supplier and returns
// a result of that invocation with a flag set to false.
func (o Rune) OrElseGetFlag(supplier func() rune) (result rune, ok bool) {
	if !o.Present {
		return supplier(), false
	}

	return o.Value, o.Present
}

// OrElseGetErr returns the value if it is present with nil error, otherwise it invokes a supplier and returns
// a result of that invocation with non-nil error.
func (o Rune) OrElseGetErr(supplier func() rune) (result rune, err error) {
	if !o.Present {
		return supplier(), errors.New("value of optional.Rune is not present")
	}

	return o.Value, nil
}

// MarshalJSON marshals Rune to json.
func (o Rune) MarshalJSON() ([]byte, error) {
	if !o.Present {
		return []byte("null"), nil
	}

	return json.Marshal(o.Value)
}

// UnmarshalJSON unmarshals Rune from json.
func (o *Rune) UnmarshalJSON(data []byte) error {
	if len(data) == 4 && string(data) == "null" {
		return nil
	}

	o.Present = true

	return json.Unmarshal(data, &o.Value)
}
